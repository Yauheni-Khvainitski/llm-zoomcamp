name: RAG System Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10']  # Focus on Python 3.10 as requested
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,jupyter,tokens]"
    
    - name: Check for critical Python syntax errors
      run: |
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names - BLOCKING
        flake8 rag --count --select=E9,F63,F7,F82 --show-source --statistics
    
    - name: Lint with flake8 (optional warnings)
      run: |
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 rag --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      continue-on-error: true
    
    - name: Run unit tests
      run: |
        python -m pytest rag/tests/ -v --tb=short
    
    - name: Run tests with coverage
      run: |
        python -m pytest rag/tests/ --cov=rag --cov-report=xml --cov-report=html --cov-report=term
    
    # External coverage upload removed - keeping coverage reports local only
    
    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v4
      if: ${{ !env.ACT }}  # Skip when running locally with act
      with:
        name: coverage-report-${{ matrix.python-version }}
        path: htmlcov/
    
    - name: Run custom test runner
      run: |
        python -m rag.tests.test_runner
    
    - name: Test import and basic functionality
      run: |
        python -c "
        from rag import Course, RAGPipeline
        print('‚úÖ Successfully imported RAG components')
        
        # Test Course enum
        courses = Course.list_courses()
        print(f'‚úÖ Found {len(courses)} courses: {courses}')
        
        # Test basic instantiation (without external dependencies)
        try:
            from rag.search import QueryBuilder
            from rag.formatting import ContextFormatter
            
            qb = QueryBuilder()
            cf = ContextFormatter()
            print('‚úÖ Successfully created core components')
        except Exception as e:
            print(f'‚ùå Error creating components: {e}')
            exit(1)
        "

  integration-test:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    services:
      elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:9.0.2
        env:
          discovery.type: single-node
          xpack.security.enabled: false
          ES_JAVA_OPTS: "-Xms512m -Xmx512m"
        ports:
          - 9200:9200
        options: >-
          --health-cmd "curl -f http://localhost:9200/_cluster/health || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,jupyter,tokens]"
    
    - name: Wait for Elasticsearch
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:9200/_cluster/health; do sleep 2; done'
    
    - name: Test Elasticsearch connection
      run: |
        python -c "
        from rag.search import ElasticsearchClient
        try:
            client = ElasticsearchClient('http://localhost:9200')
            print('‚úÖ Successfully connected to Elasticsearch')
        except Exception as e:
            print(f'‚ùå Failed to connect to Elasticsearch: {e}')
            exit(1)
        "
    
    - name: Run integration tests
      run: |
        python -c "
        from rag.search import ElasticsearchClient, QueryBuilder
        from rag.data import DocumentLoader
        from rag.formatting import ContextFormatter
        
        # Test document loading (without external API)
        loader = DocumentLoader()
        sample_docs = [
            {
                'course': 'test-course',
                'documents': [
                    {'text': 'Test text', 'question': 'Test question', 'section': 'Test'}
                ]
            }
        ]
        processed = loader.process_documents(sample_docs)
        print(f'‚úÖ Processed {len(processed)} test documents')
        
        # Test Elasticsearch operations
        es_client = ElasticsearchClient('http://localhost:9200')
        index_name = 'test-index'
        es_client.create_index(index_name)
        indexed = es_client.index_documents(processed, index_name)
        print(f'‚úÖ Indexed {indexed} documents')
        
        # Test search
        query_builder = QueryBuilder()
        query = query_builder.build_search_query('Test question')
        results = es_client.search_documents(query, index_name)
        print(f'‚úÖ Search returned {len(results)} results')
        
        # Test formatting
        formatter = ContextFormatter()
        context = formatter.format_context(results)
        print(f'‚úÖ Formatted context: {len(context)} characters')
        
        print('üéâ All integration tests passed!')
        "
      env:
        PYTHONPATH: .

  vector-integration-test:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    services:
      qdrant:
        image: qdrant/qdrant:v1.7.4
        ports:
          - 6333:6333
        env:
          QDRANT__SERVICE__HTTP_PORT: 6333
          QDRANT__SERVICE__GRPC_PORT: 6334
        options: >-
          --health-cmd "wget --no-verbose --tries=1 --spider http://localhost:6333/health || exit 1"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5
          --health-start-period 30s
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,jupyter,tokens]"
    
    - name: Wait for Qdrant
      run: |
        echo "Waiting for Qdrant to be ready..."
        timeout 120 bash -c 'until wget --quiet --tries=1 --spider http://localhost:6333/health 2>/dev/null; do 
          echo "Qdrant not ready yet, waiting..."; 
          sleep 5; 
        done'
        echo "Qdrant is ready!"
    
    - name: Test Qdrant connection
      run: |
        python -c "
        from rag.search import QdrantClientCustom
        try:
            client = QdrantClientCustom('http://localhost:6333')
            print('‚úÖ Successfully connected to Qdrant')
        except Exception as e:
            print(f'‚ùå Failed to connect to Qdrant: {e}')
            exit(1)
        "
    
    - name: Run vector store integration tests
      run: |
        python -c "
        from rag.data.vector_store import VectorStoreLoader, QdrantVectorLoader
        from rag.search import QdrantClientCustom
        from rag.data import DocumentLoader
        
        # Test document loading
        loader = DocumentLoader()
        sample_docs = [
            {
                'doc_id': 'test_1',
                'text': 'Test vector store document',
                'question': 'What is vector storage?',
                'section': 'Testing',
                'course': 'test-course'
            }
        ]
        print(f'‚úÖ Created {len(sample_docs)} test documents')
        
        # Test Qdrant client
        qdrant_client = QdrantClientCustom('http://localhost:6333')
        collection_name = 'integration-test'
        
        # Test collection creation
        qdrant_client.create_collection(
            collection_name=collection_name,
            vector_size=512,
            delete_if_exists=True
        )
        print(f'‚úÖ Created collection: {collection_name}')
        
        # Test vector store operations
        vector_store = VectorStoreLoader(qdrant_client=qdrant_client)
        
        # Test embedding generation (mocked for CI)
        print('‚úÖ Vector store loader initialized')
        
        # Test high-level interface
        qdrant_loader = QdrantVectorLoader(qdrant_client=qdrant_client)
        print('‚úÖ Qdrant vector loader initialized')
        
        print('üéâ All vector store integration tests passed!')
        "
      env:
        PYTHONPATH: .

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
    
    - name: Run safety scan
      run: |
        safety scan --json || true
    
    - name: Run bandit security scan
      run: |
        bandit -r rag/ -f json || true 