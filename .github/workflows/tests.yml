name: RAG System Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,jupyter,tokens]"
    
    - name: Lint with flake8 (optional)
      run: |
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 rag --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 rag --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      continue-on-error: true
    
    - name: Run unit tests
      run: |
        python -m pytest rag/tests/ -v --tb=short
    
    - name: Run tests with coverage
      run: |
        python -m pytest rag/tests/ --cov=rag --cov-report=xml --cov-report=html --cov-report=term
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-${{ matrix.python-version }}
        path: htmlcov/
      if: matrix.python-version == '3.10'  # Only upload for one Python version
    
    - name: Run custom test runner
      run: |
        python -m rag.tests.test_runner
    
    - name: Test import and basic functionality
      run: |
        python -c "
        from rag import Course, RAGPipeline
        print('‚úÖ Successfully imported RAG components')
        
        # Test Course enum
        courses = Course.list_courses()
        print(f'‚úÖ Found {len(courses)} courses: {courses}')
        
        # Test basic instantiation (without external dependencies)
        try:
            from rag.search import QueryBuilder
            from rag.formatting import ContextFormatter
            
            qb = QueryBuilder()
            cf = ContextFormatter()
            print('‚úÖ Successfully created core components')
        except Exception as e:
            print(f'‚ùå Error creating components: {e}')
            exit(1)
        "

  integration-test:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    services:
      elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:8.15.0
        env:
          discovery.type: single-node
          xpack.security.enabled: false
          ES_JAVA_OPTS: "-Xms512m -Xmx512m"
        ports:
          - 9200:9200
        options: >-
          --health-cmd "curl -f http://localhost:9200/_cluster/health || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,jupyter,tokens]"
    
    - name: Wait for Elasticsearch
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:9200/_cluster/health; do sleep 2; done'
    
    - name: Test Elasticsearch connection
      run: |
        python -c "
        from rag.search import ElasticsearchClient
        try:
            client = ElasticsearchClient('http://localhost:9200')
            print('‚úÖ Successfully connected to Elasticsearch')
        except Exception as e:
            print(f'‚ùå Failed to connect to Elasticsearch: {e}')
            exit(1)
        "
    
    - name: Run integration tests
      run: |
        python -c "
        from rag.search import ElasticsearchClient, QueryBuilder
        from rag.data import DocumentLoader
        from rag.formatting import ContextFormatter
        
        # Test document loading (without external API)
        loader = DocumentLoader()
        sample_docs = [
            {
                'course': 'test-course',
                'documents': [
                    {'text': 'Test text', 'question': 'Test question', 'section': 'Test'}
                ]
            }
        ]
        processed = loader.process_documents(sample_docs)
        print(f'‚úÖ Processed {len(processed)} test documents')
        
        # Test Elasticsearch operations
        es_client = ElasticsearchClient('http://localhost:9200', 'test-index')
        es_client.create_index()
        indexed = es_client.index_documents(processed)
        print(f'‚úÖ Indexed {indexed} documents')
        
        # Test search
        query_builder = QueryBuilder()
        query = query_builder.build_search_query('Test question')
        results = es_client.search_documents(query)
        print(f'‚úÖ Search returned {len(results)} results')
        
        # Test formatting
        formatter = ContextFormatter()
        context = formatter.format_context(results)
        print(f'‚úÖ Formatted context: {len(context)} characters')
        
        print('üéâ All integration tests passed!')
        "
      env:
        PYTHONPATH: .

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
    
    - name: Run safety check
      run: |
        safety check --json || true
    
    - name: Run bandit security scan
      run: |
        bandit -r rag/ -f json || true 